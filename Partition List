

class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode list1 = new ListNode(0);
        ListNode list2 = new ListNode(0);

        ListNode l1 = list1;
        ListNode l2 = list2;
        
        //ListNode cur = head;
        
        while(head!=null){
            if(head.val < x){
                l1.next = head;
                l1 = l1.next;
            }
            else {
                l2.next = head;
                l2 = l2.next;
            }
            head = head.next;
        }
        
         l2.next = null;
         l1.next = list2.next;
       
        
        return list1.next;
    }
}



TIME COMPLEXITY :- O(N);
SPACE COMPLEXITY:- O(N);





class Solution {
    public static Node partition(Node node, int x) {
        // Your code here
        
        Node list1 = new Node(0);
        Node list2 = new Node(0); //handling same values of node
        Node list3 = new Node(0);
        
        
        Node l1 = list1;
        Node l2 = list2;
        Node l3 = list3;
        
        while(node != null){
            if(node.data < x){
                l1.next = node;
                l1 = l1.next;
            } 
            else if(node.data == x){
                l2.next = node;
                l2 = l2.next;
                
            }
            else if(node.data > x){
                l3.next = node;
                l3 = l3.next;
            }
            node = node.next;
        }
        
        if(list2.next != null){
        l1.next = list2.next;
        l2.next = list3.next;
        
        } else {  
            
        l1.next = list3.next;
       
        }
         l3.next = null;
        return list1.next;
    }
}
