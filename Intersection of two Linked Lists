USING HASHSET METHOD :- 

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        HashSet<ListNode> hs = new HashSet<>();
        
        while(headA!=null){
            hs.add(headA);
            headA = headA.next;
            }
        
        while(headB != null){
            if(hs.contains(headB)){
                return headB;
            }
            headB = headB.next;
        }
        return null;
        
    } 
    
    
}

Time Complexity :- O(n+m)  // Because first iterate headA till the null point  (n)   and   then iterate headB till null point (m).
Space Complexity :-O(n).  // using extra space of hashset.



#USING ITERATIVE METHOD :-

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        

        
        ListNode temp1 = headA;
        ListNode temp2 = headB; 
        
        
        int cnt1 = 0;
        int cnt2 = 0;
        
        while(temp1!= null){
            cnt1++;
            temp1 = temp1.next;
            
        }
        
        while(temp2 != null){
            cnt2++;
            temp2 = temp2.next;
        }
        
        int diff  = Math.abs(cnt1 - cnt2);
        
        if(cnt1 > cnt2){
            for(int i=0;i<diff;i++){
                headA = headA.next;
            }
        }
        else{
            for(int i=0;i<diff;i++){
                headB = headB.next;
            }
        }
        
        while(headA != null && headB != null){
            if(headA == headB){
                return headA;
            }
       
        
        headA = headA.next;
        headB = headB.next;
        }
        return headA;
        
    } 
    
    
}


Time Complexity :- O(n);
Space Complexity :- O(1);

.
