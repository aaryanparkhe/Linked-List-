class Solution {
    public ListNode findMiddle(ListNode head){
        ListNode turtle = head;
        ListNode hare = head;
        while(hare.next != null && hare.next.next != null){
            turtle = turtle.next;
            hare = hare.next.next;
        }
        return turtle;
    }
    public ListNode reverse(ListNode head){
        ListNode cur = head;
        ListNode prev = null;
        while(cur != null){
            ListNode next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
         
        if(head == null || head.next == null){
            return true;
        } 
        
        ListNode middle = findMiddle(head);
        ListNode secondHalfStart = reverse(middle.next);
        
        ListNode firstHalfStart = head;
        
      while(secondHalfStart != null){
            if(firstHalfStart.val != secondHalfStart.val){
                return false;
            }
          firstHalfStart = firstHalfStart.next;
          secondHalfStart = secondHalfStart.next;
          
      }
        return true;
    }
}


Time Complexity :- O(n)
Space Complexity :- O(1)
